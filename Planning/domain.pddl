(define (domain bookWorld)
(:requirements :typing)
(:types bin robot book location subject size)
(:predicates (Book_At ?book_name - book ?book_location - location)
(Bin_At ?bin_name - bin ?bin_location - location)
(Robot_At ?robot_name - robot ?robot_location - location)
(Bin_Size ?bin_name - bin ?size - size)
(Book_Size ?book_name - book ?size - size)
(Book_Subject ?book_name - book ?subject - subject)
(Bin_Subject ?bin_name - bin ?subject - subject)
(Empty_Basket ?robot - robot)
(Book_in_Basket ?robot - robot ?book - book)
(Book_in_Bin ?book - book)
)
(:action Pick
:parameters (?book - book ?robot - robot ?location - location)
:precondition (and (Robot_At ?robot ?location)
(Empty_Basket ?robot)
(Book_At ?book ?location)
(not (Book_in_Basket ?robot ?book))
(not (Book_in_Bin ?book)))
:effect (and (Book_in_Basket ?robot ?book)
(not (Empty_Basket ?robot))
(not (Book_At ?book ?location)))
)
(:action Place
:parameters (?book - book ?robot - robot ?location - location ?size - size ?subject - subject ?bin - bin)
:precondition (and (Book_in_Basket ?robot ?book)
(not (Book_At ?book ?location))
(Book_Subject ?book ?subject)
(Book_Size ?book ?size)
(not (Empty_Basket ?robot))
(Bin_At ?bin ?location)
(Bin_Subject ?bin ?subject)
(Bin_Size ?bin ?size)
(Robot_At ?robot ?location))
:effect (and (Book_in_Bin ?book)
(not (Book_in_Basket ?robot ?book))
(Empty_Basket ?robot)
(Book_At ?book ?location))
)
(:action Move
:parameters (?location_to - location ?location_from - location ?robot - robot)
:precondition (and (Robot_At ?robot ?location_from)
(not (Robot_At ?robot ?location_to)))
:effect (and (Robot_At ?robot ?location_to)
(not (Robot_At ?robot ?location_from)))
)
)